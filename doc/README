  
  +------------------------------------------------+
  | OpenCaptivePortal                              |
  |                                                |
 Â | For further information please see             |
  |    http://code.google.com/p/opencaptiveportal/ |
  | or                                             |
  |    http://www.switch.ch/mobile/pwlan/          |
  +------------------------------------------------+
  
Main goal: 
  Mark packets with iptables so that the are routed through different GRE
  Tunnels to the according (commercial) WLan Internet Service Provider (WISP).

  If you are searching for a commercial supported version, please see 
  http://www.wlan-partner.com/hotspot-loesungen/wlan-access-portal/

  For contacting use please use the E-Mail addresses from the Google Code
  Project.

  The OpenCaptivePortal Software should run on a GNU/Linux Box, which is
  interconnected to a Docking Network at a University in Switzerland. See the
  picture OpenCaptivePortal.png. The Box with the OpenCaptivePortal (OCP)
  should achieve the ollowing objectives:
  - Acces from the Docking Network (e.g. public WLan) the selected resources
    1. VPN Router of the local University
    2. All other VPN Router of Swiss Universities as definied in the
       SWITCHconnect Classic ACL (Accesslist), which you can find under
       http://www.switch.ch/mobile/classic/
    3. Commercial ISPs (WISP)
       If a user wants to establish a connections via a WISP, he must visit the
       landingpage of the OCP and choose a WISP. Each WISP has a iFrame on this
       landingpage. If the user clicks on an iFrame the OCP should route all
       following traffic from this user through a GRE Tunnel to the specific
       WISP.
    4. iPass offers users the possibility to automatically connect to an WLan
       (this is a TODO, please see the TODO file)
    5. Event Login, e.g. a simple login formular on the landingpage where guest
       on events can login in (without vpn oder WISP login), see TODO.
  - IPv4 (IPv6 planned)


Services:
  The services are divided into "packages", but interact.

* Package "Landingpage" 
  Show the landingpage and offers the API to the User to set the Routes to the WISPs.
  Landingpage:    landingpage.php
    This is the welcome page for user, who are not using the VPN of the local
    University or SWITCHconnect Classic. Here are the iFrames of the WISPs.

  Add Route:      route.php  needs:  manage-route.py
    Add a Route when a user clicks on an iFrame.

  Del Route:      back.php   needs:  manage-route.py
    When a Route is established to a WISP, the WISP set a link to back.php, so
    that the user can delete the Route entry an choose another WISP (or start
    the VPN client).


* iptables
  Build the initial iptables-restore file.
  template file:  iptables.tmpl
    Insert local specific rules in this file.

  script:         make-iptables.py
    Build the iptables-restore file. Needed at startup of the GNU/Linux Box. Or
    if something bad happend.


* Statusqueries for WISPs, like: "is there still client $foo" and "which MAC
    adress does $bar have"
  XML RPC Server: xml-rpc-server.py
    Well, the server itself. Start it.

  Add User:       add-user.py
    Add a user, who can login to the XML RPC Server

